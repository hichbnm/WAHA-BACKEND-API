import base64

b64_data = """
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
""".replace("\n", "").replace(" ", "")

# Add padding if needed
missing_padding = len(b64_data) % 4
if missing_padding:
    b64_data += '=' * (4 - missing_padding)

with open("qr.png", "wb") as f:
    f.write(base64.b64decode(b64_data))

print("QR code saved as qr.png")